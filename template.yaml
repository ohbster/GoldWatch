AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  GoldWatch

  Sample SAM Template for GoldWatch

Globals:
  Function:
    Timeout: 5 #change this back to 3

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
  
      - 
        Label: 
          default: Database Parameters
        Parameters:
          - DatabaseInstanceIdentifier
          - DatabaseName
          - DatabaseUser
          - DatabasePassword
          - DatabaseBackupRetentionPeriod
          - DatabaseAllocatedStorage
          - DatabaseInstanceClass
          - MultiAZDatabase

Parameters:
  CodeDeployRolePolicy:
    Type: String
    Description: Role needed by CodeDeploy to deploy on EC2 instances
    Default: arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole  

  EC2InstanceManagedPolicy:
    Type: String
    Description: ARN of the IAM Manage policy to allow SSM to mananage EC2 instances
    Default: arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  
  WebServerUserData:
    Type: String
    Description: User data for creation of webserver instances
    Default: |
      
            #!/bin/bash
            #update yum, install php, apache, and jq
            yum update -y
            yum amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
            yum install -y httpd
            systemctl enable httpd
            
            amazon-linux-extras enable php8.0
            yum clean metadata
            yum install -y php-cli php-pdo php-fpm php-mysqlnd php-xml
            #install jq to manipulate json from bash. This makes it easier to create the config
            #file /etc/goldwatch/gwconfig which will keep the database login info. It is chmod 640 
            #belonging to apache group and owned by root. Only admin and apache can view login credentials
            yum install -y jq
            
            #Create www group and make /var/www writable to www group
            groupadd www
            usermod -a -G www ec2-user
            #chown -R root:www /var/www
            chown -R root:www /var/www #will colon cause problem in yaml?
            chmod 2775 /var/www
            find /var/www -type d -exec sudo chmod 2775 {} +
            find /var/www -type f -exec sudo chmod 0664 {} +
            #goldwatch setting directery
            mkdir /etc/goldwatch
            chown root:apache goldwatch
            chmod 755 goldwatch
            echo '[{"hostname":"x", "dbname":"x", "username":"x","password":"x" }]' | cat > dbconfig.json
            chmod 640 /etc/goldwatch/dbconfig.json
            
            #install composer for php
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php -r "if (hash_file('sha384', 'composer-setup.php') === '906a84df04cea2aa72f40b5f787e49f22d4c2f19492ac310e8cba5b96ac8b64115ac402c8cd292b8a03482574915d1a8') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
            php composer-setup.php
            php -r "unlink('composer-setup.php');"
            mv composer.phar /usr/local/bin/composer
            cd /var/www/html
            composer require aws/aws-sdk-php
            
            #start apache after php
            systemctl start httpd
            
  
  ExportVpcStackName:
    Description: The name of the vpc stack that exports values
    Type: String
    Default: gw-network    
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH Access to EC2 Instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  DatabaseInstanceIdentifier:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with letter and contain only alpha numeric values
    Default: goldwatchmysql
    Description: Instance identifier name
    MaxLength: 60
    MinLength: 1
    Type: String

  DatabaseName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with letter and contain only alpha numeric values
    Default: goldwatchdb
    Description: MySQL database name
    MaxLength: 64
    MinLength: 1
    Type: String

  DatabaseUser: 
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with letter and contain only alpha numeric values
    Default: dbadmin
    Description: Username for MySQL database access
    MaxLength: 16
    MinLength: 1
    NoEcho: true
    Type: String

  DatabasePassword:
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters
    Default: Test1234
    Description: Password for MySQL database access
    MaxLength: 41
    MinLength: 8
    NoEcho: true
    Type: String

  DatabaseBackupRetentionPeriod:
    ConstraintDescription: Database backup retention period must be between 0 and 35 
    Default: 0
    Description: The number fo days for which automatic DB snapshots are stored
    MaxValue: 35
    MinValue: 0
    Type: Number

  DatabaseAllocatedStorage:
    ConstraintDescription: Must be bewteen 0 and 1024Gb
    Default: 20
    Description: The size of the database (Gb)
    MaxValue: 1024
    MinValue: 5
    Type: Number

  DatabaseInstanceClass:
    AllowedValues:
      - db.t2.micro
      - db.t3.micro
     
    ConstraintDescription: Must select a valid database instance type
    Default: db.t2.micro
    Description: The database instance type
    Type: String

  MultiAZDatabase:
    AllowedValues:
      - true
      - false
    ConstraintDescription: Must be either true or false 
    Default: false
    Description: Creates a Multi-AZ MySQL Amazon RDS database instance
    Type: String

Resources:
         
##########
#Functions
##########          
#in case you need to deal with cors, etc. use link below for example
#https://github.com/aws/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  GoldWatchInitFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: gold_watch/
      Handler: gwinit.lambda_handler
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
          - Sid: SSMGetParameterPolicy
            Effect: Allow
            Action:
              - ssm:GetParameters
              - ssm:GetParameter
            Resource: '*'         
      Runtime: python3.9
      Architectures:
        - x86_64
      Events: #this ara may need to be clipped. Not needed and should not be executed more than once.
        Init:
          Type: Api 
          Properties:
            Path: /init
            Method: get
      #Allow the lambda function to communicate with the rds and web server instance      
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub ${ExportVpcStackName}-DatabaseSecurityGroup
          - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup
          - Fn::ImportValue: !Sub ${ExportVpcStackName}-ALBSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet1
          - Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet2
            
# GetDateFunction:
#  Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: gold_watch/
#      Handler: date.lambda_handler
#      Runtime: python3.9
#      Architectures:
#       - x86_64
#      Events:
#        GetDate:
#          Type: Api
#          Properties:
#            Path: /date
#            Method: get
            
  UpdateGoldPrice:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: gold_watch/
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
          - Sid: SSMGetParameterPolicy
            Effect: Allow
            Action:
              - ssm:GetParameters
              - ssm:GetParameter
              
            Resource: '*'  
            
#        - Statement:
#          - Sid: InvokeLambdaFunction
#            Effect: Allow
#            Action: lambda:InvokeFunction
#            Resource: '*'                        
#            Principal:
#              - Service: events.amazonaws.com
#            Condition:
#              ArnLike:
#                AWS:SourceArn: !GetAtt UpdateGoldPriceRule.Arn   
            
        
        
                  
      #Environment:
        #Variables:
          #ENV: 'dev'
          #DBUSER: "{{resolve:ssm:gw-dbuser:1}}"
      Handler: UpdateGoldPrice.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64     
      Events:
        RateEvent:
          Type: Schedule
          Properties:
            Schedule: 'rate(5 minutes)'
            Name: RateSchedule
            Description: Trigger UpdateGoldPrice lambda function every 5 mins
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub ${ExportVpcStackName}-DatabaseSecurityGroup
          - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup
          - Fn::ImportValue: !Sub ${ExportVpcStackName}-ALBSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet1
          - Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet2      
           
#  LambdaEventBridgePolicy:    
#    Type: AWS::IAM::Policy
#   Properties: 
#      PolicyDocument:
#        Version: "2012-10-17"
#        Principal: events.amazonaws.com
#        Statement:
 #         - Effect: Allow
 #           Action:
 #             - 'lambda:InvokeFunction'
 #           Resource: '*'
 #     PolicyName: LambdaAllowUpdatePriceRule
 #     Roles: 
 #       - !Ref LambdaRoleForEventBridge
#        Users: 
#          - String
        
           
##########
#Db    
##########
          
  GoldWatchDB:
    Type: AWS::RDS::DBInstance
    DependsOn: 
      - DatabaseSubnetGroup
    Properties:
      Engine: mysql
      EngineVersion: 8.0.27
      SourceRegion: us-east-1
      AllocatedStorage: !Ref DatabaseAllocatedStorage
      AvailabilityZone:  !Select [ 0, !GetAZs '']
      BackupRetentionPeriod: !Ref DatabaseBackupRetentionPeriod
      DBInstanceClass: !Ref DatabaseInstanceClass
      DBInstanceIdentifier: !Ref DatabaseInstanceIdentifier
      DBName:  !Ref DatabaseName
      DeletionProtection: false
      DBSubnetGroupName: !Ref DatabaseSubnetGroup          
      MasterUsername: "{{resolve:ssm:gw-dbuser:1}}"
      MasterUserPassword: "{{resolve:ssm-secure:gw-dbpass:1}}"
      MultiAZ: !Ref MultiAZDatabase
      VPCSecurityGroups:         
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-DatabaseSecurityGroup
                  
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: goldwatch db subnet group    
      DBSubnetGroupDescription: Subnet group for GoldWatch RDS database
      SubnetIds:
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet1
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet2
      Tags:
        - Key: Name
          Value: Database subnets

  GoldWatchDBEndpointAddr:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:  gw-dbaddr
      Value:
        Fn::GetAtt:
          - "GoldWatchDB"
          - "Endpoint.Address"
  GoldWatchDBEndpointPort:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: gw-dbport
      Value:
        Fn::GetAtt:
          - "GoldWatchDB"
          - "Endpoint.Port"          
                  
##########
#EventBridge 
##########    
  #This section creates an EventsBridge Rule that triggers lambda functions 
  #to update the gold price at 5 min intervals.     
  UpdateGoldPriceRule:
    Type: AWS::Events::Rule
    Properties:
      Description: EventBridge rule to run the UpdateGoldPrice lambda function
      Name: UpdateGoldPriceRule
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - 
          Arn:
            Fn::GetAtt:
              - "UpdateGoldPrice"
              - "Arn"
          Id: "UpdateGoldPriceTarget1"

##########
#EC2 Instance used for web and mail server
##########  
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c02fb55956c7d316 
        #Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type  
          #ami-0c02fb55956c7d316 (64-bit x86) 
          #ami-03190fe20ef6b1419 (64-bit Arm)
      SubnetId: 
        Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet1 
      KeyName: !Ref KeyName
      #Need to parameterize this
      UserData: 
        Fn::Base64: !Ref WebServerUserData               
      IamInstanceProfile: !Ref WebServerInstanceProfile                
      SecurityGroupIds:
        #- !Ref EC2InstanceSecurityGroup
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: Gold Watch WebServer Instance    
          
  WebServerInstance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c02fb55956c7d316 
        #Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type  
          #ami-0c02fb55956c7d316 (64-bit x86) 
          #ami-03190fe20ef6b1419 (64-bit Arm)
      SubnetId: 
        Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet2 
      KeyName: !Ref KeyName
      UserData: 
        Fn::Base64: !Ref WebServerUserData     
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: Gold Watch WebServer Instance 2           
  
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c02fb55956c7d316
      SubnetId:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-PublicSubnet2
      KeyName: !Ref KeyName
      SecurityGroupIds: 
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-BastionHostSecurityGroup
      Tags:
        - Key: Name
          Value: Bastion Host Instance
  
  #Iam Instance Profile to allow SSM
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: gold-watch-WebserverInstanceProfile
      Roles:
        - !Ref EC2RoleForSSM
    
  
  #This section creates role and System Manager resources to run commands to
  #ec2 instance for mailing alerts
  EC2RoleForSSM:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns: 
        - !Ref EC2InstanceManagedPolicy
  
  EC2RoleForCodeDeploy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref CodeDeployRolePolicy         
  
#  LambdaRoleForEventBridge:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument: 
#        Version: "2012-10-17"
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - events.amazonaws.com
#            Action:
#              - 'sts:AssumeRole'
#      Path: /

  
  
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  GoldWatchInitApi:
    Description: "API Gateway endpoint URL for Prod stage for Gold Watch Init"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/init/"
  GetDateApi:
    Description: "Api Gateway endpoint URL for Prod stage for GetDate function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/date/" 
  UpdateGoldPriceApi:
    Description: "Api Gateway endpoint URL for Prod stage for GetCurGoldPrice function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/UpdateGoldPrice/"
#  GetDateFunction:
#    Description: "Get date lambda function ARN"
#    Value: !GetAtt GetDateFunction.Arn
  WebServerInstance:
    Description: Instance Id for the Web/Mail server
    Export:
      Name: !Sub ${AWS::StackName}-WebServerInstance
    Value: !Ref WebServerInstance
  WebServerInstance2:
    Description: Instance Id for the Web/Mail server
    Export:
      Name: !Sub ${AWS::StackName}-WebServerInstance2
    Value: !Ref WebServerInstance2
  EC2CodeDeployServiceRole:
    Description: Arn for the EC2 CodeDeploy service role
    Export:
      Name: !Sub ${AWS::StackName}-EC2CodeDeployServiceRole
    Value: !GetAtt EC2RoleForCodeDeploy.Arn
  #HelloWorldFunctionIamRole:
    #Description: "Implicit IAM Role created for Hello World function"
    #Value: !GetAtt HelloWorldFunctionRole.Arn
  
  #GoldWatchDB:
  #  Description: "RDS-mysql db ARN"
  #  Value: !GetAtt GoldWatchDB.Arn
