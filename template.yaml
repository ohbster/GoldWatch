AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  GoldWatch

  Sample SAM Template for GoldWatch

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30 #change this back to 3

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
  
      - 
        Label: 
          default: Database Parameters
        Parameters:
          - DatabaseInstanceIdentifier
          - DatabaseName
          - DatabaseUser
          - DatabasePassword
          - DatabaseBackupRetentionPeriod
          - DatabaseAllocatedStorage
          - DatabaseInstanceClass
          - MultiAZDatabase

Parameters:
  EC2InstanceManagedPolicy:
    Type: String
    Description: ARN of the IAM Manage policy to allow SSM to mananage EC2 instances
    Default: arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  ExportVpcStackName:
    Description: The name of the vpc stack that exports values
    Type: String
    Default: gw-network    

  DatabaseInstanceIdentifier:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with letter and contain only alpha numeric values
    Default: goldwatchmysql
    Description: Instance identifier name
    MaxLength: 60
    MinLength: 1
    Type: String

  DatabaseName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with letter and contain only alpha numeric values
    Default: goldwatchdb
    Description: MySQL database name
    MaxLength: 64
    MinLength: 1
    Type: String

  DatabaseUser: 
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with letter and contain only alpha numeric values
    Default: dbadmin
    Description: Username for MySQL database access
    MaxLength: 16
    MinLength: 1
    NoEcho: true
    Type: String

  DatabasePassword:
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters
    Default: Test1234
    Description: Password for MySQL database access
    MaxLength: 41
    MinLength: 8
    NoEcho: true
    Type: String

  DatabaseBackupRetentionPeriod:
    ConstraintDescription: Database backup retention period must be between 0 and 35 
    Default: 0
    Description: The number fo days for which automatic DB snapshots are stored
    MaxValue: 35
    MinValue: 0
    Type: Number

  DatabaseAllocatedStorage:
    ConstraintDescription: Must be bewteen 0 and 1024Gb
    Default: 20
    Description: The size of the database (Gb)
    MaxValue: 1024
    MinValue: 5
    Type: Number

  DatabaseInstanceClass:
    AllowedValues:
      - db.t2.micro
      - db.t3.micro
     
    ConstraintDescription: Must select a valid database instance type
    Default: db.t2.micro
    Description: The database instance type
    Type: String

  MultiAZDatabase:
    AllowedValues:
      - true
      - false
    ConstraintDescription: Must be either true or false 
    Default: false
    Description: Creates a Multi-AZ MySQL Amazon RDS database instance
    Type: String

Resources:

          
##########
#Functions
##########          

  GoldWatchInitFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: gold_watch/
      Handler: gwinit.lambda_handler
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
          - Sid: SSMGetParameterPolicy
            Effect: Allow
            Action:
              - ssm:GetParameters
              - ssm:GetParameter
            Resource: '*'         
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        Init:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /init
            Method: get
            
  GetDateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: gold_watch/
      Handler: date.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        GetDate:
          Type: Api
          Properties:
            Path: /date
            Method: get
            
  PullCurGoldPrice:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: gold_watch/
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
          - Sid: SSMGetParameterPolicy
            Effect: Allow
            Action:
              - ssm:GetParameters
              - ssm:GetParameter
            Resource: '*'       
      Environment:
        Variables:
          ENV: 'dev'
          DBUSER: "{{resolve:ssm:gw-dbuser:1}}"
      Handler: PullCurGoldPrice.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64     
      Events:
        GetDate:
          Type: Api
          Properties:
            Path: /pullcurgoldprice
            Method: get
           
##########
#Db    
##########
          
  GoldWatchDB:
    Type: AWS::RDS::DBInstance
    DependsOn: 
      - DatabaseSubnetGroup
    Properties:
      Engine: mysql
      EngineVersion: 5.7
      SourceRegion: us-east-1
      AllocatedStorage: !Ref DatabaseAllocatedStorage
      AvailabilityZone:  !Select [ 0, !GetAZs '']
      BackupRetentionPeriod: !Ref DatabaseBackupRetentionPeriod
      DBInstanceClass: !Ref DatabaseInstanceClass
      DBInstanceIdentifier: !Ref DatabaseInstanceIdentifier
      DBName:  !Ref DatabaseName
      DeletionProtection: false
      DBSubnetGroupName: !Ref DatabaseSubnetGroup          
      MasterUsername: "{{resolve:ssm:gw-dbuser:1}}"
      MasterUserPassword: "{{resolve:ssm-secure:gw-dbpass:1}}"
      MultiAZ: !Ref MultiAZDatabase
      VPCSecurityGroups: 
        #- !Ref RDSInstanceSecurityGroup
        
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-DatabaseSecurityGroup
                  
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: goldwatch db subnet group    
      DBSubnetGroupDescription: Subnet group for GoldWatch RDS database
      SubnetIds:
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet1
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet2
        #- Ref! PrivateSubnet1
        #- Ref! PrivateSubnet2
        #- Fn::Ref: PrivateSubnet1
        #- Fn::Ref: PrivateSubnet2
      Tags:
        - Key: Name
          Value: Database subnets

  
  GoldWatchDBEndpointAddr:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:  gw-dbaddr
      Value:
        Fn::GetAtt:
          - "GoldWatchDB"
          - "Endpoint.Address"
  GoldWatchDBEndpointPort:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: gw-dbport
      Value:
        Fn::GetAtt:
          - "GoldWatchDB"
          - "Endpoint.Port"          
          

          
##########
#EventBridge 
##########    
  #This section creates an EventsBridge Rule that triggers lambda functions 
  #to update the gold price at 5 min intervals.     
  UpdateGoldPriceRule:
    Type: AWS::Events::Rule
    Properties:
      Description: EventBridge rule to run the pullcurgoldprice lambda function
      Name: UpdateGoldPriceRule
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - 
          Arn:
            Fn::GetAtt:
              - "PullCurGoldPrice"
              - "Arn"
          Id: "UpdateGoldPriceTarget1"

##########
#EC2 Instance used for web and mail server
##########  
  GoldWatchEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c02fb55956c7d316 
        #Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type  
          #ami-0c02fb55956c7d316 (64-bit x86) 
          #ami-03190fe20ef6b1419 (64-bit Arm)
      #SubnetId: !Ref PublicSubnet1
      SubnetId: 
        Fn::ImportValue: !Sub ${ExportVpcStackName}-PublicSubnet1 
      #Need to parameterize this
      KeyName: EC2 Tutorial
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl enable httpd
            systemctl start httpd
            
###Amazon Blocks outgoing smtp traffic Must use SES###
            #yum install -y sendmail
            #systemctl enable sendmail
            #systemctl start sendmail
            #echo "This is a test email from GoldWatch" | sendmail -s "Test Email" ohbster@protonmail.com 
      SecurityGroupIds:
        #- !Ref EC2InstanceSecurityGroup
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup
          
  
  #This section creates role and System Manager resources to run commands to
  #ec2 instance for mailing alerts
  EC2RoleForSSM:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns: 
        - !Ref EC2InstanceManagedPolicy
               
  
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  GoldWatchInitApi:
    Description: "API Gateway endpoint URL for Prod stage for Gold Watch Init"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/init/"
  GetDateApi:
    Description: "Api Gateway endpoint URL for Prod stage for GetDate function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/date/" 
  PullCurGoldPriceApi:
    Description: "Api Gateway endpoint URL for Prod stage for GetCurGoldPrice function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/pullcurgoldprice/"
  GetDateFunction:
    Description: "Get date lambda function ARN"
    Value: !GetAtt GetDateFunction.Arn
  #HelloWorldFunctionIamRole:
    #Description: "Implicit IAM Role created for Hello World function"
    #Value: !GetAtt HelloWorldFunctionRole.Arn
  
  #GoldWatchDB:
  #  Description: "RDS-mysql db ARN"
  #  Value: !GetAtt GoldWatchDB.Arn
