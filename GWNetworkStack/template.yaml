
AWSTemplateFormatVersion: 2010-09-09

Description: This template creates the GoldWatchVPC with public and private subnets
 
#Metadata: 
  

Parameters: 
  VpcCidr:
    Default: 10.0.0.0/16
    Description: The IP range for the vpc
    Type: String
    
  PublicSubnet1Cidr:
    Default: 10.0.0.0/24
    Description: The IP range for the public subnet 1
    Type: String
    
  PublicSubnet2Cidr:
    Default: 10.0.1.0/24
    Description: The IP range for the public subnet 2
    Type: String
    
  PrivateSubnet1Cidr:
    Default: 10.0.2.0/24
    Description: The IP range for the private subnet 1
    Type: String
    
  PrivateSubnet2Cidr:
    Default: 10.0.3.0/24
    Description: The IP range for the private subnet 2
    Type: String

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: '18'
    MinLength: '9'
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: GoldWatchVPC 

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: GoldWatchIGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
         
##########
#Subnets
##########
#PUBLIC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2
      VpcId: !Ref VPC
      
  #PRIVATE
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 1 | Database Tier
      VpcId: !Ref VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 2 | WebServer Tier
      VpcId: !Ref VPC
       
      
##########
#Routing
##########

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Public Route Table
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
     
##########
#Security Groups
##########

  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/HTTPS access via port 80/443 to ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB Security Group
      VpcId: !Ref VPC

  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Access to RDS Database Instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: Database Security Group
      VpcId: !Ref VPC

  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access on port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: GoldWatch SSH Security Group
      VpcId: !Ref VPC

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow internet traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443 
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp 
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionHostSecurityGroup
      Tags:
        - Key: Name
          Value: Webserver Security Group
      VpcId: !Ref VPC
    
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from local machine to bastion host
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: Bastion Host Security Group
      
##########
#Outputs
##########  
   
Outputs: 
  VPC:
    Description: VPC ID
    Export: 
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC
  
  #Subnets    
  PublicSubnet1:
    Description: Public Subnet1 Id
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1
    Value: !Ref PublicSubnet1
    
  PublicSubnet2:
    Description: Public Subnet2 Id
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2
    Value: !Ref PublicSubnet2
    
  PrivateSubnet1:
    Description: Private Subnet1 Id
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1
    Value: !Ref PrivateSubnet1
    
  PrivateSubnet2:
    Description: Private Subnet2 Id
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2
    Value: !Ref PrivateSubnet2
    
  #Security Groups
  ALBSecurityGroup:
    Description: Application Load Balancer Security Group Id
    Export:
      Name: !Sub ${AWS::StackName}-ALBSecurityGroup
    Value: !Ref ALBSecurityGroup

  DatabaseSecurityGroup:
    Description: RDS Database security Group
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSecurityGroup
    Value: !Ref DatabaseSecurityGroup
      
  WebServerSecurityGroup:
    Description: Web Server Security Group Id
    Export:
      Name: !Sub ${AWS::StackName}-WebServerSecurityGroup
    Value: !Ref WebServerSecurityGroup
    
  BastionHostSecurityGroup:
    Description: Bastion Host Security Group Id
    Export:
      Name: !Sub ${AWS::StackName}-BastionHostSecurityGroup
    Value: !Ref BastionHostSecurityGroup
  
      
      
      
      
      
      
      
      
      
      
      
      
